{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/helpers.js"],"names":["data","posts","allMarkdownRemark","edges","map","node","Post","site","siteMetadata","author","language","categories","cntPerCategory","forEach","category","obj","sortable","item","push","sort","a","b","sortObjectByValue","getSortedCategoriesByCount","useState","tabIndex","setTabIndex","React","Layout","SEO","title","Bio","Tabs","className","value","onChange","e","tabs","PostCardsColumn","slice","filter","post","index","includes","moreUrl","showMoreButton"],"mappings":"yNAWe,sBAAe,IAAZA,EAAI,EAAJA,KACVC,EAAQD,EAAKE,kBAAkBC,MAAMC,KAAI,gBAAGC,EAAI,EAAJA,KAAI,OAAO,IAAIC,IAAKD,MACtE,EAA6BL,EAAKO,KAAKC,aAA/BC,EAAM,EAANA,OAAQC,EAAQ,EAARA,SACVC,EAAU,CAAI,OAAK,mBCPe,SAACV,GACzC,IAAMW,EAAiB,GAQvB,OANAX,EAAMY,SAAQ,YAAa,EAAVF,WACJE,SAAQ,SAACC,GAClBF,EAAeE,GAAYF,EAAeE,GAAYF,EAAeE,GAAY,EAAI,QAZjE,SAACC,GACzB,IAAIC,EAAW,GACf,IAAK,IAAIC,KAAQF,EAAKC,EAASE,KAAK,CAACD,EAAMF,EAAIE,KAE/C,OADAD,EAASG,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE,GAAKD,EAAE,MAC1BJ,EAYAM,CAAkBV,GAAgBR,KAAI,YAAU,eDFzBmB,CAA2BtB,KACzD,EAAgCuB,mBAAS,GAAlCC,EAAQ,KAAEC,EAAW,KAM5B,OACEC,kBAACC,IAAM,KACLD,kBAACE,IAAG,CAACC,MAAM,SACXH,kBAACI,IAAG,CAACtB,OAAQA,EAAQC,SAAUA,IAC/BiB,kBAACK,IAAI,CAACC,UAAW,OAAQC,MAAOT,EAAUU,SARrB,SAACC,EAAGF,GAC3BR,EAAYQ,IAO4DG,KAAM1B,IAC5EgB,kBAACW,IAAe,CACdrC,MACe,IAAbwB,EACIxB,EAAMsC,MAAM,EAAG,GACftC,EACGuC,QAAO,SAACC,EAAMC,GAAK,OAAKD,EAAK9B,WAAWgC,SAAShC,EAAWc,OAC5Dc,MAAM,EAAG,GAElBK,QAAO,UAAwB,IAAbnB,EAAiB,GAAKd,EAAWc,IACnDoB,gBAAc","file":"component---src-pages-index-js-e1448b9428a8129833d3.js","sourcesContent":["import React, { useState } from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Bio from '../components/bio';\nimport PostCardsColumn from '../components/post-cards-column';\nimport Post from '../models/post';\nimport Tabs from '../components/tabs';\n\nimport { getSortedCategoriesByCount } from '../utils/helpers';\n\nexport default ({ data }) => {\n  const posts = data.allMarkdownRemark.edges.map(({ node }) => new Post(node));\n  const { author, language } = data.site.siteMetadata;\n  const categories = ['All', ...getSortedCategoriesByCount(posts)];\n  const [tabIndex, setTabIndex] = useState(0);\n\n  const onTabIndexChange = (e, value) => {\n    setTabIndex(value);\n  };\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Bio author={author} language={language} />\n      <Tabs className={'tabs'} value={tabIndex} onChange={onTabIndexChange} tabs={categories} />\n      <PostCardsColumn\n        posts={\n          tabIndex === 0\n            ? posts.slice(0, 4)\n            : posts\n                .filter((post, index) => post.categories.includes(categories[tabIndex]))\n                .slice(0, 4)\n        }\n        moreUrl={`posts/${tabIndex === 0 ? '' : categories[tabIndex]}`}\n        showMoreButton\n      />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 500, truncate: true)\n          frontmatter {\n            categories\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    site {\n      siteMetadata {\n        language\n        author {\n          name\n          bio {\n            role\n            description\n            thumbnail\n          }\n          social {\n            github\n            email\n          }\n        }\n      }\n    }\n  }\n`;\n","const sortObjectByValue = (obj) => {\n  let sortable = [];\n  for (let item in obj) sortable.push([item, obj[item]]);\n  sortable.sort((a, b) => b[1] - a[1]);\n  return sortable;\n};\n\nexport const getSortedCategoriesByCount = (posts) => {\n  const cntPerCategory = {};\n\n  posts.forEach(({ categories }) => {\n    categories.forEach((category) => {\n      cntPerCategory[category] = cntPerCategory[category] ? cntPerCategory[category] + 1 : 1;\n    });\n  });\n\n  return sortObjectByValue(cntPerCategory).map(([category]) => category);\n};\n"],"sourceRoot":""}